package spring.mvc.util;import java.io.BufferedWriter;import java.io.IOException;import java.io.OutputStreamWriter;import java.lang.reflect.Type;import java.nio.charset.Charset;import org.apache.commons.io.IOUtils;import org.springframework.http.HttpInputMessage;import org.springframework.http.HttpOutputMessage;import org.springframework.http.MediaType;import org.springframework.http.converter.AbstractHttpMessageConverter;import org.springframework.http.converter.HttpMessageNotReadableException;import org.springframework.http.converter.HttpMessageNotWritableException;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.google.gson.JsonParseException;import com.google.gson.reflect.TypeToken;public class GSONHttpMessageConverter extends		AbstractHttpMessageConverter<Object> {	public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");	private GsonBuilder gsonBuilder = new GsonBuilder()			.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");	public GSONHttpMessageConverter() {		super(new MediaType("application", "json", DEFAULT_CHARSET));	}	/*	 * (non-Javadoc)	 * 	 * @see	 * org.springframework.http.converter.AbstractHttpMessageConverter#supports	 * (java.lang.Class)	 */	@Override	protected boolean supports(Class<?> clazz) {		throw new UnsupportedOperationException();	}	@Override	public boolean canRead(Class<?> clazz, MediaType mediaType) {		return MediaType.APPLICATION_JSON.isCompatibleWith(mediaType);	}	@Override	public boolean canWrite(Class<?> clazz, MediaType mediaType) {		return MediaType.APPLICATION_JSON.isCompatibleWith(mediaType);	}	public void registerTypeAdapter(Type type, Object serializer) {		gsonBuilder.registerTypeAdapter(type, serializer);	}	/*	 * (non-Javadoc)	 * 	 * @see	 * org.springframework.http.converter.AbstractHttpMessageConverter#readInternal	 * (java.lang.Class, org.springframework.http.HttpInputMessage)	 */	@Override	protected Object readInternal(Class<? extends Object> clazz,			HttpInputMessage inputMessage) throws IOException,			HttpMessageNotReadableException {		try {			Gson gson = gsonBuilder.create();			return gson.fromJson(IOUtils.toString(inputMessage.getBody()),					clazz);		} catch (JsonParseException e) {			throw new HttpMessageNotReadableException("Could not read JSON: "					+ e.getMessage(), e);		}	}	/*	 * (non-Javadoc)	 * 	 * @see	 * org.springframework.http.converter.AbstractHttpMessageConverter#writeInternal	 * (java.lang.Object, org.springframework.http.HttpOutputMessage)	 */	@Override	protected void writeInternal(Object t, HttpOutputMessage outputMessage)			throws IOException, HttpMessageNotWritableException {		Type genericType = TypeToken.get(t.getClass()).getType();		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(				outputMessage.getBody(), DEFAULT_CHARSET));		try {			Gson gson = gsonBuilder.create();			writer.append(gson.toJson(t, genericType));		} finally {			writer.flush();			writer.close();		}	}}